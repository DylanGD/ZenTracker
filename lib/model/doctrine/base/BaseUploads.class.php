<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Uploads', 'doctrine');

/**
 * BaseUploads
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $hash
 * @property string $title
 * @property integer $cat
 * @property string $description
 * @property string $nfo
 * @property integer $author
 * @property string $url
 * @property integer $size
 * @property integer $minlevel
 * @property Users $Users
 * @property Doctrine_Collection $UploadsHits
 * @property Doctrine_Collection $TorrentsPeers
 * @property Doctrine_Collection $TorrentsPeersOffset
 * @property Categories $Categories
 * @property Doctrine_Collection $UploadsComs
 * 
 * @method string              getHash()                Returns the current record's "hash" value
 * @method string              getTitle()               Returns the current record's "title" value
 * @method integer             getCat()                 Returns the current record's "cat" value
 * @method string              getDescription()         Returns the current record's "description" value
 * @method string              getNfo()                 Returns the current record's "nfo" value
 * @method integer             getAuthor()              Returns the current record's "author" value
 * @method string              getUrl()                 Returns the current record's "url" value
 * @method integer             getSize()                Returns the current record's "size" value
 * @method integer             getMinlevel()            Returns the current record's "minlevel" value
 * @method Users               getUsers()               Returns the current record's "Users" value
 * @method Doctrine_Collection getUploadsHits()         Returns the current record's "UploadsHits" collection
 * @method Doctrine_Collection getTorrentsPeers()       Returns the current record's "TorrentsPeers" collection
 * @method Doctrine_Collection getTorrentsPeersOffset() Returns the current record's "TorrentsPeersOffset" collection
 * @method Categories          getCategories()          Returns the current record's "Categories" value
 * @method Doctrine_Collection getUploadsComs()         Returns the current record's "UploadsComs" collection
 * @method Uploads             setHash()                Sets the current record's "hash" value
 * @method Uploads             setTitle()               Sets the current record's "title" value
 * @method Uploads             setCat()                 Sets the current record's "cat" value
 * @method Uploads             setDescription()         Sets the current record's "description" value
 * @method Uploads             setNfo()                 Sets the current record's "nfo" value
 * @method Uploads             setAuthor()              Sets the current record's "author" value
 * @method Uploads             setUrl()                 Sets the current record's "url" value
 * @method Uploads             setSize()                Sets the current record's "size" value
 * @method Uploads             setMinlevel()            Sets the current record's "minlevel" value
 * @method Uploads             setUsers()               Sets the current record's "Users" value
 * @method Uploads             setUploadsHits()         Sets the current record's "UploadsHits" collection
 * @method Uploads             setTorrentsPeers()       Sets the current record's "TorrentsPeers" collection
 * @method Uploads             setTorrentsPeersOffset() Sets the current record's "TorrentsPeersOffset" collection
 * @method Uploads             setCategories()          Sets the current record's "Categories" value
 * @method Uploads             setUploadsComs()         Sets the current record's "UploadsComs" collection
 * 
 * @package    zt2
 * @subpackage model
 * @author     Optix
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUploads extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('uploads');
        $this->hasColumn('hash', 'string', 40, array(
             'type' => 'string',
             'fixed' => 1,
             'length' => 40,
             ));
        $this->hasColumn('title', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('cat', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '',
             ));
        $this->hasColumn('nfo', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('author', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('size', 'integer', null, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             ));
        $this->hasColumn('minlevel', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users', array(
             'local' => 'author',
             'foreign' => 'id'));

        $this->hasMany('UploadsHits', array(
             'local' => 'id',
             'foreign' => 'upid'));

        $this->hasMany('TorrentsPeers', array(
             'local' => 'hash',
             'foreign' => 'hash'));

        $this->hasMany('TorrentsPeersOffset', array(
             'local' => 'hash',
             'foreign' => 'hash'));

        $this->hasOne('Categories', array(
             'local' => 'cat',
             'foreign' => 'id'));

        $this->hasMany('UploadsComs', array(
             'local' => 'id',
             'foreign' => 'upid'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}