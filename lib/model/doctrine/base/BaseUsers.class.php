<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Users', 'doctrine');

/**
 * BaseUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $parent
 * @property string $username
 * @property string $password
 * @property datetime $passexpires
 * @property string $random
 * @property string $email
 * @property string $avatar
 * @property datetime $lastvisit
 * @property string $pid
 * @property string $role
 * @property boolean $active
 * @property string $reason
 * @property datetime $ban_expire
 * @property string $description
 * @property Users $Parents
 * @property Doctrine_Collection $Invites
 * @property Doctrine_Collection $Notifications
 * @property Doctrine_Collection $Donations
 * @property Doctrine_Collection $FrmTopicsUsr
 * @property Doctrine_Collection $Ips
 * @property Doctrine_Collection $PmParticipants
 * @property Doctrine_Collection $News
 * @property Doctrine_Collection $PollVotes
 * @property Doctrine_Collection $Shoutbox
 * @property Doctrine_Collection $Uploads
 * @property Doctrine_Collection $UploadsHits
 * @property Doctrine_Collection $TorrentsPeers
 * @property Doctrine_Collection $TorrentsPeersOffset
 * @property Doctrine_Collection $MsgMessages
 * @property Doctrine_Collection $MsgVotes
 * 
 * @method integer             getParent()              Returns the current record's "parent" value
 * @method string              getUsername()            Returns the current record's "username" value
 * @method string              getPassword()            Returns the current record's "password" value
 * @method datetime            getPassexpires()         Returns the current record's "passexpires" value
 * @method string              getRandom()              Returns the current record's "random" value
 * @method string              getEmail()               Returns the current record's "email" value
 * @method string              getAvatar()              Returns the current record's "avatar" value
 * @method datetime            getLastvisit()           Returns the current record's "lastvisit" value
 * @method string              getPid()                 Returns the current record's "pid" value
 * @method string              getRole()                Returns the current record's "role" value
 * @method boolean             getActive()              Returns the current record's "active" value
 * @method string              getReason()              Returns the current record's "reason" value
 * @method datetime            getBanExpire()           Returns the current record's "ban_expire" value
 * @method string              getDescription()         Returns the current record's "description" value
 * @method Users               getParents()             Returns the current record's "Parents" value
 * @method Doctrine_Collection getInvites()             Returns the current record's "Invites" collection
 * @method Doctrine_Collection getNotifications()       Returns the current record's "Notifications" collection
 * @method Doctrine_Collection getDonations()           Returns the current record's "Donations" collection
 * @method Doctrine_Collection getFrmTopicsUsr()        Returns the current record's "FrmTopicsUsr" collection
 * @method Doctrine_Collection getIps()                 Returns the current record's "Ips" collection
 * @method Doctrine_Collection getPmParticipants()      Returns the current record's "PmParticipants" collection
 * @method Doctrine_Collection getNews()                Returns the current record's "News" collection
 * @method Doctrine_Collection getPollVotes()           Returns the current record's "PollVotes" collection
 * @method Doctrine_Collection getShoutbox()            Returns the current record's "Shoutbox" collection
 * @method Doctrine_Collection getUploads()             Returns the current record's "Uploads" collection
 * @method Doctrine_Collection getUploadsHits()         Returns the current record's "UploadsHits" collection
 * @method Doctrine_Collection getTorrentsPeers()       Returns the current record's "TorrentsPeers" collection
 * @method Doctrine_Collection getTorrentsPeersOffset() Returns the current record's "TorrentsPeersOffset" collection
 * @method Doctrine_Collection getMsgMessages()         Returns the current record's "MsgMessages" collection
 * @method Doctrine_Collection getMsgVotes()            Returns the current record's "MsgVotes" collection
 * @method Users               setParent()              Sets the current record's "parent" value
 * @method Users               setUsername()            Sets the current record's "username" value
 * @method Users               setPassword()            Sets the current record's "password" value
 * @method Users               setPassexpires()         Sets the current record's "passexpires" value
 * @method Users               setRandom()              Sets the current record's "random" value
 * @method Users               setEmail()               Sets the current record's "email" value
 * @method Users               setAvatar()              Sets the current record's "avatar" value
 * @method Users               setLastvisit()           Sets the current record's "lastvisit" value
 * @method Users               setPid()                 Sets the current record's "pid" value
 * @method Users               setRole()                Sets the current record's "role" value
 * @method Users               setActive()              Sets the current record's "active" value
 * @method Users               setReason()              Sets the current record's "reason" value
 * @method Users               setBanExpire()           Sets the current record's "ban_expire" value
 * @method Users               setDescription()         Sets the current record's "description" value
 * @method Users               setParents()             Sets the current record's "Parents" value
 * @method Users               setInvites()             Sets the current record's "Invites" collection
 * @method Users               setNotifications()       Sets the current record's "Notifications" collection
 * @method Users               setDonations()           Sets the current record's "Donations" collection
 * @method Users               setFrmTopicsUsr()        Sets the current record's "FrmTopicsUsr" collection
 * @method Users               setIps()                 Sets the current record's "Ips" collection
 * @method Users               setPmParticipants()      Sets the current record's "PmParticipants" collection
 * @method Users               setNews()                Sets the current record's "News" collection
 * @method Users               setPollVotes()           Sets the current record's "PollVotes" collection
 * @method Users               setShoutbox()            Sets the current record's "Shoutbox" collection
 * @method Users               setUploads()             Sets the current record's "Uploads" collection
 * @method Users               setUploadsHits()         Sets the current record's "UploadsHits" collection
 * @method Users               setTorrentsPeers()       Sets the current record's "TorrentsPeers" collection
 * @method Users               setTorrentsPeersOffset() Sets the current record's "TorrentsPeersOffset" collection
 * @method Users               setMsgMessages()         Sets the current record's "MsgMessages" collection
 * @method Users               setMsgVotes()            Sets the current record's "MsgVotes" collection
 * 
 * @package    zt2
 * @subpackage model
 * @author     Optix
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsers extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('users');
        $this->hasColumn('parent', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('username', 'string', 25, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 25,
             ));
        $this->hasColumn('password', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 64,
             ));
        $this->hasColumn('passexpires', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => true,
             ));
        $this->hasColumn('random', 'string', 5, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 5,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('avatar', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('lastvisit', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('pid', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'fixed' => 1,
             'length' => 40,
             ));
        $this->hasColumn('role', 'string', 3, array(
             'type' => 'string',
             'default' => 'mbr',
             'length' => 3,
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('reason', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('ban_expire', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users as Parents', array(
             'local' => 'parent',
             'foreign' => 'id'));

        $this->hasMany('Invites', array(
             'local' => 'id',
             'foreign' => 'uid'));

        $this->hasMany('Notifications', array(
             'local' => 'id',
             'foreign' => 'uid'));

        $this->hasMany('Donations', array(
             'local' => 'id',
             'foreign' => 'donor'));

        $this->hasMany('FrmTopicsUsr', array(
             'local' => 'id',
             'foreign' => 'uid'));

        $this->hasMany('Ips', array(
             'local' => 'id',
             'foreign' => 'uid'));

        $this->hasMany('PmParticipants', array(
             'local' => 'id',
             'foreign' => 'mpmid'));

        $this->hasMany('News', array(
             'local' => 'id',
             'foreign' => 'author'));

        $this->hasMany('PollVotes', array(
             'local' => 'mbr_id',
             'foreign' => 'mid'));

        $this->hasMany('Shoutbox', array(
             'local' => 'id',
             'foreign' => 'author'));

        $this->hasMany('Uploads', array(
             'local' => 'id',
             'foreign' => 'author'));

        $this->hasMany('UploadsHits', array(
             'local' => 'id',
             'foreign' => 'uid'));

        $this->hasMany('TorrentsPeers', array(
             'local' => 'id',
             'foreign' => 'mid'));

        $this->hasMany('TorrentsPeersOffset', array(
             'local' => 'pid',
             'foreign' => 'pid'));

        $this->hasMany('MsgMessages', array(
             'local' => 'id',
             'foreign' => 'author'));

        $this->hasMany('MsgVotes', array(
             'local' => 'id',
             'foreign' => 'uid'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'username',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}