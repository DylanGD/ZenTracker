<?php

/**
 * Uploads
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    zt2
 * @subpackage model
 * @author     Optix
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Uploads extends BaseUploads
{
  /**
   * Return the maximum size available in MB
   * @return int
   */
  static public function getMaxSize() {
    $q = Doctrine_Query::create()
            ->select("MAX(size)")
            ->from("Uploads")
            ->useQueryCache(true)->setQueryCacheLifeSpan(3600*24)
            ->useResultCache(true)->setResultCacheLifeSpan(60*60)
            ->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);
    return round($q/1024/1024, 0);
  }
  
  /**
   * Get list of users who have posted something
   * @return array
   */
  static public function getUploaders() {
    $a = array();
    $q = Doctrine_Query::create()->select("t.author")
      ->addSelect("(SELECT m.username FROM Users m WHERE t.author = m.id) as username")
      ->from("Uploads t")->distinct(true)->orderBy('username')
      ->useQueryCache(true)->setQueryCacheLifeSpan(3600*24)  
      ->useResultCache(true)->setResultCacheLifeSpan(60*60)
      ->execute(array(), Doctrine::HYDRATE_ARRAY);
    foreach ($q as $u)
      $a[$u['author']] = $u['username'];
    return $a;
  }

  public function getCompleted() {
    if ($this->getHash())
      return Doctrine_Query::create()
        ->select('c.uid, u.username, u.slug, u.avatar')
        ->from('TorrentsPeers c')
        ->leftJoin('c.Users u')
        ->where("c.hash = ?", $this->getHash())
        ->andWhere('c.remain = 0')
        ->execute();
    else
      return Doctrine_Query::create()
        ->select('c.uid, u.username, u.slug, u.avatar')
        ->from('UploadsHits c')
        ->leftJoin('c.Users u')
        ->where('c.upid = ?', $this->getId())
        ->execute();
  }

  /**
   * Get list of files for a torrent
   * @return array
   */
  public function getFiles($url) {
    $url = "uploads/torrents/".$url;
    if (!file_exists($url))
      return false;
    // Loading BitTorrent class
    require_once("../lib/bittorrent/Autoload.php");
    // Open a new torrent instance
    $torrent = new PHP_BitTorrent_Torrent();
    // Load torrent
    $torrent->loadFromTorrentFile($url);
    // Get filelist
    $fileList = $torrent->getFileList();
    // If it returns only one file, build array like multi-file.
    if (is_string($fileList))
      return array(array(
        "length" => $torrent->getSize(),
        "path" => array($fileList)
      ));
    else
      return $fileList;
  }

  public function save(Doctrine_Connection $con = null) {
    $id = $this->getId();
    $q = parent::save();
    if (!$id) {
      Doctrine::getTable("Shoutbox")->setShout(
        array("postedNewUpload", "shopping.png", $this->getTitle()), 
        sfContext::getInstance()->getController()
          ->genUrl("@upload?c=".$this->Categories->getSlug()."&slug=".$this->getSlug())
      );
    }
    
    return $q;
  }
}
